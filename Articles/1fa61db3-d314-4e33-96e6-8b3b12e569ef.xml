<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>1fa61db3-d314-4e33-96e6-8b3b12e569ef</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>API Hijacking</Title>
    <Category />
    <Phase />
    <Technology />
    <Type />
    <DirectLink>API Hijacking</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description=

An API Injection Attack involves intercepting the method calls made by an application to an external library. This attack can be used to screen or modify parameter values or execute malicious code with elevated privileges. The interception of methods usually involves tricking the application into loading a trojan external library. This can be accomplished by replacing the external library with a malicious counterpart on the file system or tricking the application into loading a malicious library from an alternate location on the file system.

=Impact=


=Countermeasures=

Use explicit paths: Do not depend on environment path variables to locate the library for you, be explicit in specifying the full path to the library you intend to load.

File Permissions: Use proper directory and file permissions on external libraries so that they can not be modified or replaced by an attacker.

Binary Verification: All non-system external libraries should be verified for authenticity before being loaded. This can be accomplished by digitally signing the libraries and verifying the signature before loading the library.

Encryption: If none of the above countermeasures can be employed, then the application must encrypt all sensitive information before passing them as parameter values to external libraries. This will not prevent an attacker from executing malicious code, but will prevent the leakage of sensitive information.

=Application Check=

]]></Data>
  </Content>
</TeamMentor_Article>