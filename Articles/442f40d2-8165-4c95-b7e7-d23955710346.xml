<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>442f40d2-8165-4c95-b7e7-d23955710346</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Key Management</Title>
    <Category />
    <Phase />
    <Technology>PHP</Technology>
    <Type />
    <DirectLink>Key Management</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description=

Key management vulnerabilities are a class of vulnerabilities that refer to any kind of weakness in the mechanism for storing cryptographic keys. Key management vulnerabilities usually result in the attacker being able to compromise cryptographic keys. 

Cryptographic keys are typically used for authentication or data encryption. Unfortunately some platforms, including PHP, don't provide a secure cryptographic key store. Key storage is almost always vulnerable in applications that use such platforms. 

Key management vulnerabilities affect applications that use cryptographic keys.

=Impact=

Key management vulnerabilities result in the attacker being able to recover cryptographic keys. If authentication keys are compromised, the attacker will be able to authenticate to the application using the stolen credentials, and perform actions on behalf of the compromised accounts. 

If encryption keys are compromised, the attacker will be able to recover encrypted data. One of the most common key management issues is placing the keys close to the encrypted data. In that case, if an attacker compromises the system and downloads the data, they can usually download the keys as well, thus making encryption irrelevant. ]]></Data>
  </Content>
</TeamMentor_Article>