<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>688d7c59-bd73-4984-901a-db7b2b249658</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Format String Vulnerability</Title>
    <Category />
    <Phase />
    <Technology />
    <Type />
    <DirectLink>Format String Vulnerability</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description=

Format string attacks are a class of vulnerabilities that can be used to crash a program or to execute harmful code. If unfiltered user input is used as the format string parameter in C functions that perform formatting, such as <i>printf()</i>, an attacker can use the %s, %x, and other format tokens to print data either from the stack or sometimes from other memory locations. Arbitrary data can be written anywhere in memory using the %n format token, used to specify that the number of bytes formatted should be written to the supplied pointer argument. More stack manipulation is required, but this argument can be inserted as part of a format string attack.

=Impact=

Elevation of Privilege

Read or Write sensitive information in memory

Arbitrary code execution

=Countermeasures=

Hard code the format string

Format strings should not contain any user controlled data.

Use code scanners. Code scanners are effective at detecting format string vulnerabilities.

=Application Check=

]]></Data>
  </Content>
</TeamMentor_Article>