<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>7f3c6601-439f-4e9d-8365-be9985d68315</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>SQL Injection</Title>
    <Category>Database Security</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>SQL Injection</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Description==

SQL injection is a type of vulnerabilities in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. To prevent this problem, validate all input and use parameterized APIs for database access. To check for this vulnerability, find all queries generated by the application and verify that they don't include unvalidated user input.

==Impact==

SQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called "stacked queries". "Stacked queries" allow executing multiple queries separated by a semi-colon from one string. If "stacked queries" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. 

==ASP.NET Countermeasures==

Validate all input:
* [[3de41277-0cc1-4ebc-8dd7-e96d161aa0ef|Validate All Input]]
* [[e59923e7-c2fb-4a75-8db7-a9a91e869f74|Validate Input for Length, Range, Format, And Type]]
* [[9f0fc6bb-7dd0-4e1a-bbeb-d73ab3c25ebf|Validate All Input Passed to the Database]]

Use parameterized APIs for database access:
* [[92e7b9b6-b0fb-4ec0-b529-0c6156430198|Use Parameterized APIs for Database Access]]
* [[0949fe39-0723-49ec-970b-a914bb722695|Use Stored Procedures for SQL Queries]]

==ASP.NET Checklists==

All input is validated:
* [[a210fcb7-f142-4c2e-844a-c43e0859f90d|All Input Is Validated]]
* [[0e71dd64-87d1-4cf5-9569-ea320f209977|Input Is Validated for Length, Range, Format, And Type]]
* [[e164ec5f-d683-445f-925c-9e09d2b5bbc3|All Database Input Is Validated]]

Parameterized APIs are used for database access:
* [[cf040b19-4e85-4276-b718-65bc5c290f8f|Parameterized APIs Are Used for Database Access]]
* [[72bb474e-80c6-4533-b363-0195c2c74196|Stored Procedures with Type-safe Parameters Are Used for SQL Queries]]

==Java Countermeasures==

Validate all input:
* [[b531d29c-86f7-4812-90ce-5f3f0f780aba|Validate Input from All Sources]]
* [[c98695c5-cf02-44a1-96bf-1f8046b8ad9d|Validate Input for Length, Range, Format, And Type]]
* [[67060e7b-7145-4e84-b574-c07548f81d9f|Validate All Input Passed to the Database]]
* [[0f49430b-2abe-408f-b046-89fa739f5d53|Input Validation Using JSF]]
* [[18ac74df-602b-4a58-8998-52f638f3a045|Input Validation Using SpringMVC]]
* [[d124abb1-e230-43ef-8762-1caa0dbb89ca|Input Validation Using Struts 1]]
* [[2f917654-65a8-49c9-b000-c17f9765bf42|Input Validation Using Struts 2]]

Use parameterized APIs for database access:
* [[7f8deb21-cd52-41be-80b4-8897612021dc|Use Parameterized APIs for Data Access]]
* [[bcfcbcbb-4bd6-4011-9e24-efa70d4a3724|Parameterize Dynamic SQL in Stored Procedures]]

==Java Checklists==

All input is validated:
* [[b531d29c-86f7-4812-90ce-5f3f0f780aba|Input from All Sources Is Validated]]
* [[61869793-2c10-40c0-b82a-babcc0312697|Input Is Validated for Length, Range, Format And Type]]
* [[42f4b565-14f7-42f4-8c5a-0f78f357e4c0|All Database Input Is Validated]]

Parameterized APIs are used for database access:
* [[d5a1c94b-601e-4e2a-9ad8-33461792a8bb|Parameterized APIs Are Used for Data Access]]
* [[93d15ca4-c950-4370-8de5-cdb2cc2974fe|Dynamic SQL in Stored Procedures Is Parameterized]]

==PHP Countermeasures==

Validate all input:
* [[c0a4f56c-1e8c-4d3a-97e2-fc9e969d5d52|Use Positive Input Validation]]

Use parameterized APIs for database access:
* [[0f4cb1a2-b00a-4d71-9e26-627e6d425798|Use Prepared Statements for Data Access]]

==PHP Checklists==

All input is validated:
* [[d4129497-3a66-44d1-881e-e6f004af2e0d|Positive Input Validation Is Used]]

Parameterized APIs are used for database access:
* [[8850ea3d-c43e-48bd-bf5c-f5a6ef898038|Prepared Statements Are Used for Data Access]]

==Additional Resources==

* For more information about SQL injection attacks, please see http://en.wikipedia.org/wiki/SQL_injection]]></Data>
  </Content>
</TeamMentor_Article>