<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>86c2e5c1-83f4-46a7-abba-f28fcea8a323</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>AJAX Injection</Title>
    <Category />
    <Phase />
    <Technology />
    <Type />
    <DirectLink>AJAX Injection</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description=

AJAX (Asynchronous Javascript and XML) technology allows web pages to dynamically update specific content behind the scenes without the need to refresh the whole page. The ability to continually update the content of an AJAX page is done by calling an XmlHttpRequest  (XHR) object with JavaScript to send HTTP requests to web servers. These requests typically send data in the form of XML or JSON (JavaScript Object Notation).

AJAX injection is a type of Cross Site Scripting Attack (XSS) that leverages the XML or JSON format of the input to the client browser. JSON is particularly popular because it is easy to parse JSON objects by simply passing them to the eval() function. Unfortunately, the use of eval() makes the application equivalently easy to exploit. Cleverly format strings containing malicious JavaScript may be stored as content on servers with weak validation or sent directly to the client browser using a spoofing or man in the middle attack. This JavaScript is then parsed and execute by the client's browser without their knowledge. Ultimately, this attack may be used to steal session cookies, send email on behalf of the victim, or any other impact available to the XSS attack.

Failure to validate user input for script tags when that input can be echoed back into a web page.

Failure to encode user supplied input upon display of the data.

Trusting data retrieved from a shared data store.

=Impact=

Since the code runs in the same domain as the trusted site any cookies or other confidential site data can be read by the malicious AJAX code.

JavaScript code injection: By using the XMLHttpRequest object attackers can download and install JavaScript code modules to be run on the local browser dynamically and send information from the computer without the victim's knowledge.

=Countermeasures=

Constrain input: Use vigorous white-list style checking on any user input that may be reflected to a user's browser.

HTML encode all user input on display: Use white-list style HTML encoding libraries to ensure all possibly malicious characters are encoded before being echoed back to the user, regardless of whether they're loaded as part of the original page load or through later XMLHttpRequests.

=Application Check=

]]></Data>
  </Content>
</TeamMentor_Article>