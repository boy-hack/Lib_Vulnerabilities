<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>effdfa96-837f-45b2-8963-51d2bfc07356</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Denial of Service Vulnerability</Title>
    <Category />
    <Phase />
    <Technology />
    <Type />
    <DirectLink>Denial of Service Vulnerability</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description=

Attackers attempt to create a denial of service situation by causing the application or device to cease responding to valid requests from users. The attacker can do this either by sending malicious input to the application or by utilizing application features to exploit a design flaw, which leads to a denial of service to legitimate users.

Malicious input causes the application to either:<

Process a single set of data indefinitely or enter a state of deadlock, thereby making the service too busy or unable to respond to other legitimate requests

Consume large amounts of resources - low resources on a system may cause it to attend to a very low number of or no other legitimate requests

Terminate due to an error - if a crash occurs, the service will not be able to serve other legitimate requests

It is also possible for a denial of service situation to occur with perfectly legitimate input. If a non-malicious user accidentally inputs large amounts of legitimate data, this may cause the application to stop responding to other legitimate requests. Another case where legitimate input may lead to a Denial of Service is when a malicious user repeatedly sends large volumes of acceptable input in order to compromise the availability of the service.

An example of an attack where application features are used to exploit a design flaw is the Account Lockout Attack.

Another type of the Denial of Service Attack is the DDoS or Distributed Denial of Service attack. In this attack the malicious user takes control over many machines and attempts to consume all the resources of a service using large amounts of legitimate requests. This attack is extremely difficult to protect against because the attacker is successively simulating a heavy load in such a way that the system cannot distinguish legitimate requests from maliciously generated requests .

=Impact=

The direct impact of a Denial of Service attack is that the application or service becomes unavailable to other users, leading to a potential loss of business. The impact of a Denial of Service attack is frequently underestimated. It is true that these attacks cannot be used to steal data or impersonate more privileged users, making them ineffective at providing the attacker with a direct economic gain. Many people therefore assume that Denial of Service attacks are merely a nuisance; however, nothing could be further from the truth. Historically, Denial of Service attacks have been very effective at extorting millions of dollars from applications that depend heavily on a web presence.

=Countermeasures=

Proper validation of input type, length and format will help bolster your application against attacks which lead to Denial of Service. Please refer to the guidelines for input validation mentioned in the Related Items section below. 

Shared resources should be monitored to ensure that the level of resource for a particular request directly relates to the privilege level of the user making that request. Anonymous users should be able to consume little or no shared resources while highly-privileged users should have no restriction. Depending on the nature of the application, explicitly logging resource utilization inside the application may be useful.

=Application Check=

]]></Data>
  </Content>
</TeamMentor_Article>