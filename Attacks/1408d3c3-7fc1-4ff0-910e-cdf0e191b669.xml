<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="378667225" Content_Hash="-563042629">
  <Metadata>
    <Id>1408d3c3-7fc1-4ff0-910e-cdf0e191b669</Id>
    <Id_History>c392a633-2f74-4557-94ba-9fd6eeeefb95,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Client-side Validation Attack</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink>Client-side Validation Attack</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="html">
    <Data><![CDATA[<h1>Applies To</h1>
  <p>All network applications.</p>
  <h1>Description</h1>
  <p>From an attacker's perspective, client network applications — such as an email client or web browser — are viewed simply as a user interface for generating network requests which are subsequently sent to a server. The client application is simply a tool that <strong>may </strong>be used to generate requests, but it is never a <strong>requirement</strong> that the attacker actually use this tool. Any network messages sent by the client can be monitored by the attacker, enabling them to write a separate tool which generate the same requests. In this scenario, it is impossible for the server to tell whether the request was generated by the real client application or the attacker's custom tool.</p>
  <p>Consequently, any validation checks performed by the client on the data sent to the server can be easily bypassed by writing a new malicious client application that does not perform this validation. Validation on the client is certainly important for the user experience and in general for application usability. However, the same checks should always be made on the server to ensure that the all input received by the server is valid.</p>
  <h1>Impact</h1>
  <ul>
    <li>Subversion of application specific business rules (see example). </li>
    <li>Server side code injection such as SQL Injection, XML Injection and LDAP injection. </li>
    <li>Execution of malicious code due to input causing a buffer overflow or similar condition. </li>
    <li>Information disclosure such as created by path manipulation or canonicalization. </li>
    <li>Denial of service caused by unconstrained or poorly formatted input.</li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Failure to validate user input on the server </li>
    <li>Inconsistent validation between client and server-side validation</li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>
      <strong>Constrain input on the server.</strong> Use vigorous white-list style checking on any user input that is provided by the client </li>
    <li>
      <strong>Validate input on the server</strong>. Assume input is malicious until proven otherwise. Even if the input is coming from a client that does validation, do not accept the input until it has been validate by the server. Client side validation is for usability; server side validation is for security. </li>
    <li>
      <strong>Use whitelists for input validation.</strong> Malicious input comes in many forms; guard against as many of them as possible by using an inclusion list of known good inputs and reject everything else. </li>
  </ul>
  <h1>Example</h1>
  <p>The classic example of a client-side validation attack occurs with an common E-Commerce Web Site. Consider a standard checkout form that allows the shopper to enter the desired quantity of a particular item. The page that displays this form contains Javascript that validates the value entered is positive. The server side code that processes the request sent by this page does not also validate this field, assuming that the Javascript validation is sufficient. This incorrect assumption allows an attacker to generate a custom HTTP request with a negative value for the quantity field. Under some circumstances, such a request could result in crediting the attacker's bank account.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on OWASP's Have Your Cake and Eat It Too, see: <a href="https://www.owasp.org/index.php/Have_Your_Cake_and_Eat_It_Too">https://www.owasp.org/index.php/Have_Your_Cake_and_Eat_It_Too</a></li>
    <li>For more information on Validating Input for PHP, see:<a href="http://www.tuxradar.com/practicalphp/7/7/0"> http://www.tuxradar.com/practicalphp/7/7/0</a><br /></li>
    <li>For more information on PHP security, see: <a href="http://php.robm.me.uk/">http://php.robm.me.uk/</a><br /></li>
  </ul>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/110cc11a-5a28-4fc2-a269-4210069b8865">Attack: Server-Side Code Injection Attack</a>
    </li>
    <li>
      <a href="/article/df8e9450-e2ed-4ed8-b8de-a518a90d1789">Attack: File Name and Path Manipulation Attack</a>
    </li>
    <li>
      <a href="/article/4b11c55a-9205-4ed6-9add-14e6addfc5b3">Attack: Command Injection Attack</a>
    </li>
    <li>
      <a href="/article/e49c6b3a-880f-46db-a07d-80dc2177a36a">Attack: Business Rule Attack</a>
    </li>
    <li>
      <a href="/article/7d83d845-cd2b-4067-bb4c-5fbb890b9c9e">Attack: Information Disclosure Attack</a>
    </li>
    <li>
      <a href="/article/92fed6bc-b075-486f-9a25-d77fddd6cf13">Attack: Denial of Service Attack</a>
    </li>
    <li>
      <a href="/article/946a5edb-e8f8-4365-8675-b8a5032c201b">Guideline: Validate All Data Passed Between Native and Java Code </a>
    </li>
    <li>
      <a href="/article/88f49e05-f101-4764-b8e3-b31cd7507071">Guideline: Do Not Rely on Request Validation </a>
    </li>
    <li>
      <a href="/article/f29fac90-c626-41d6-9184-acd6007696cf">Guideline: Validate Input for Length, Range, Format, and Type </a>
    </li>
    <li>
      <a href="/article/ce899ba6-8ae2-4494-8706-ce863fae58e7">Guideline: Filter All User-Supplied Filename and Path Input </a>
    </li>
    <li>
      <a href="/article/40eea61e-c8bd-494a-b75d-c18c2074c752">Guideline: Validate Input from All Sources </a>
    </li>
    <li>
      <a href="/article/6e981095-84bd-4158-a212-8f9937bcb336">Guideline: Do Not Rely on Client-Side Validation </a>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>