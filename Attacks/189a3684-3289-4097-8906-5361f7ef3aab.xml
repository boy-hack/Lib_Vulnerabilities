<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1493768801" Content_Hash="1131462436">
  <Metadata>
    <Id>189a3684-3289-4097-8906-5361f7ef3aab</Id>
    <Id_History>a9181d84-bd94-4b51-a521-6246efed735f,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Double Encoding Attack</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink>Double Encoding Attack</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="wikitext">
    <Data><![CDATA[=Applies To

All web applications.
=Description

By doubly encoding input, an attacker may be able to bypass security checks that are only decoded once. The singly decoded input will pass security checks and allow the malicious input to be passed to backend servers where it will be fully decoded and interpreted as input.
=Impact

    *Remote Code Execution: This attack is often used in conjunction with XSS or SQL injection to bypass security checks.
    *Directory Traversal: by encoding '../' and variants, security checks may be bypassed and later interpreted by the server or file system allowing the attacker to access protected files.

=Vulnerabilities

    *Failure to validate user input for encoded input.
    *Trusting data or failing to completely decode and check retrieved data from a shared data store.

=Countermeasures

    Constrain input: Use vigorous white-list style checking on any user input.
    Fully decode: Ensure all input is fully decoded using methods at the backend server before operating on received data.

=Example

|Malicious String| 	Technology 	|Single Encoded Version 	|Double Encoded Version|
|' (single quote) 	|SQL 	|%27 	|%2527|
|..\ 	|Directory Traversal 	|%2E%2E%2F 	|..%252F .. %%35c ..%%35%63 ..%25%35%63 ..etc|
|alert("XSS") 	|Javascript 	|\u0061\u006C\u0065\u0072\u0074\u0028\u0022\u0058\u0053\u0053\u0022\u0029 |	\u005C\u0075\u0030\u0030\u0036\u0031\u005C\u0075\u0030\u0030\u0036\u0043\u005C\u0075\u0030\u0030\u0036\u0035\u005C\u0075\u0030\u0030\u0037\u0032\u005C\u0075\u0030\u0030\u0037\u0034\u005C\u0075\u0030\u0030\u0032\u0038\u005C\u0075\u0030\u0030\u0032\u0032\u005C\u0075\u0030\u0030\u0035\u0038\u005C\u0075\u0030\u0030\u0035\u0033\u005C\u0075\u0030\u0030\u0035\u0033\u005C\u0075\u0030\u0030\u0032\u0032\u005C\u0075\u0030\u0030\u0032\u0039\u000A|
|<script>gotcha!</script> 	|HTML 	|<script 	|<script>gotcha!</script>|

=Additional Resources

    *For more information on Core JavaScript Guide: 2 Values, Variables, and Literals, see http://www.webreference.com/javascript/reference/core/ident.html
    *For more information on URL encoding related attacks, see http://people.w3.org/rishida/scripts/uniview/conversion.php

=Related Items

    Attack: Canonicalization Attack
    Attack: AJAX Injection Attack
    Attack: Command Injection Attack
    Attack: Cross Site Scripting Attack
    Attack: File Name and Path Manipulation Attack
    Attack: Forceful Browsing Attack
    Attack: LDAP Injection Attack
    Attack: Server-Side Code Injection Attack
    Attack: SQL Injection Attack
    Attack: XML Injection Attack
    Attack: Information Disclosure Attack
    Guideline: Validate All Data Passed Between Native and Java Code
    Guideline: Do Not Rely on Request Validation
    Guideline: Validate Input from All Sources
    Guideline: Validate Input for Length, Range, Format, and Type
    Guideline: Do Not Rely on Client-Side Validation
    Guideline: Filter All User-Supplied Filename and Path Input
]]></Data>
  </Content>
</TeamMentor_Article>