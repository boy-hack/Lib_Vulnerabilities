<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1946259373" Content_Hash="-1484428830">
  <Metadata>
    <Id>468c8d7a-ffc6-49ad-bef5-1886fd809a96</Id>
    <Id_History>92fed6bc-b075-486f-9a25-d77fddd6cf13,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Denial of Service Attack</Title>
    <Category>Application State</Category>
    <Phase>Design</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink>Denial of Service Attack</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="wikitext">
    <Data><![CDATA[=Applies To

All applications and all networking devices.

=Description

Attackers attempt to create a denial of service situation by causing the application or device to cease responding to valid requests from users. The attacker can do this either by sending malicious input to the application or by utilizing application features to exploit a design flaw, which leads to a denial of service to legitimate users.

Malicious input causes the application to:

    *Process a single set of data indefinitely or enter a state of deadlock, thereby making the service too busy or unable to respond to other legitimate requests
    *Consume large amounts of resources - low resources on a system may cause it to attend to a very low number of or no other legitimate requests
    *Terminate due to an error - if a crash occurs, the service will not be able to serve other legitimate requests

It is also possible for a denial of service situation to occur with perfectly legitimate input. If a non-malicious user accidentally inputs large amounts of legitimate data, this may cause the application to stop responding to other legitimate requests. Another case where legitimate input may lead to a Denial of Service is when a malicious user repeatedly sends large volumes of acceptable input in order to compromise the availability of the service.

Another type of the Denial of Service Attack is the DDoS or Distributed Denial of Service attack. In this attack the malicious user takes control over many machines and attempts to consume all the resources of a service using large amounts of legitimate requests. This attack is extremely difficult to protect against because the attacker is successively simulating a heavy load in such a way that the system cannot distinguish legitimate requests from maliciously generated requests .

=Impact

The direct impact of a Denial of Service attack is that the application or service becomes unavailable to other users, leading to a potential loss of business. The impact of a Denial of Service attack is frequently underestimated. It is true that these attacks cannot be used to steal data or impersonate more privileged users, making them ineffective at providing the attacker with a direct economic gain. Many people therefore assume that Denial of Service attacks are merely a nuisance; however, nothing could be further from the truth. Historically, Denial of Service attacks have been very effective at extorting millions of dollars from applications that depend heavily on a web presence.

=Vulnerabilities

Depending on the nature of your application or device, there could be numerous causes which may lead to a DoS problem. Some of the most common vulnerabilities that might lead to a DoS are:

    *Lack of or inadequate input validation. Lack of appropriate input validation may allow an attacker to submit data to your application that could lead to a Denial of Service. Examples of attacks which could lead to a DoS situation due to lack of input validation are:
        **Buffer Overflow Attack can lead to application termination or code execution\\
        **SQL Injection attack can corrupt the database in such a way that renders the service useless\\
        **Command Injection Attack could cause the application to loop indefinitely or enter a state of deadlock\\
        **Integer Underflow Attack can cause the application to consume excessive amount of memory on a system\\

*Inappropriate use of shared resources. Allowing low privileged users (such as anonymous or guest users) or processes to share limited resources used by other users (authenticated or member users) or processes with a higher level of privilege can lead to resource contention, which in turn may result in denying the service to the privileged users or processes. Some examples of limited resources are:
        **Storage: If unauthenticated users can somehow cause the application to store some form of data on the server storage, they may be able to rob other authorized users of this resource. If the host server runs out of disk space, operating system instability, degraded performance, and even system crashes can result. If the process either exhausts the available memory of the system or available process memory, host or process instability, at least, is likely. If the system doesn't crash, no new requests will be handled until memory is made available.\\
       **Processor Time: Many denial of service attacks simply find a route through the system which consumes an inordinate amount of CPU time and take that route multiple times. On networking devices, this happens when higher level packet filtration is being used which forces the device to route packets via the CPU, instead of doing so in hardware accelerators. Applications that accept data with a complicated format or that interpret the data they've been sent are particularly vulnerable to these kind of attacks; it is often possible to cause an application of this type to spend a very large amount of time on a small amount of data. Even input validation can be a concern here - complicated regexes often have very bad pessimal cases for matching input which can take orders of magnitude longer than the average.\\
        **TCP Ports: The number of concurrent connections that a network port can serve is limited. Given this, the availability of a service can be compromised by an attacker who repeatedly makes very large number of connections to the port simultaneously. Without even authenticating, the anonymous connection on the port will be active for a given amount of time (whatever the timeout value of the port is set to). This will allow the attacker to keep connecting to the port continuously and robbing other legitimate users of the service.\\
        **Connection Pools and other Resources: There are a number of higher level resources which are typically constrained in most systems, connection pools to a database server being a primary example. Other examples include i-nodes in a file system, named pipes, and similar system-constrained resources.\\

    *Not failing securely. Services should be configured to expect and handle failures. The aim of an enterprise is to reduce downtime due to attacks. Having a design strategy that allows your service to be automatically restarted in the event of a crash will significantly reduce downtime.

=Countermeasures

    *Proper validation of input type, length and format will help bolster your application against attacks which lead to Denial of Service. Please refer to the guidelines for input validation mentioned in the Related Items section below.
    *Shared resources should be monitored to ensure that the level of resource for a particular request directly relates to the privilege level of the user making that request. Anonymous users should be able to consume little or no shared resources while highly-privileged users should have no restriction. Depending on the nature of the application, explicitly logging resource utilization inside the application may be useful.

=Example

One example of this type of attack is the SYN flood attack in which an attacker uses an automated program to send a large number of TCP SYN requests to the server to fill the pending connection queue on the server. When the server's connection queue has been filled legitimate connections cannot be made.

Another example is if the application allows a user to submit script or other interpreted text. The attacker may be able to submit a script, which causes the application to enter into an infinite loop and consume all the resources on the machine, thereby rendering it incapable of performing legitimate tasks.
=Additional Resources

    *For more information on Denial of Service attacks, see: http://en.wikipedia.org/wiki/Denial-of-service_attack
    *For more information on Denial of Service attacks from Carnegie-Mellon, see: http://www.cert.org/tech_tips/denial_of_service.html

=Related Items
  
    *[[0d3f3bbd-6442-4fd2-bb54-2ac10b64695c|Attack: ARP Spoofing Attack]]
    *[[378080c8-3a72-4d2f-bf5e-a5cc6bd5f54b|Attack: Wireless Packet Injection Attack]]
    *[[380b7108-0c16-4fbf-a914-6d37acf55421|Attack: DNS Cache Poisoning Attack]]
    *[[aa707b5c-7a44-4081-bb80-e795da26b57d|Attack: VLAN Spoofing Attack]]
    *[[b1757bda-0a0d-48e7-b101-3c4088e41878|Attack: SQL Injection Attack]]
    *[[8698cde2-0fdf-4676-a043-ae90e62f55b8|Attack: Command Injection Attack]]
    *[[577e90c9-8e44-4240-b00f-768316d63901|Attack: Account Lockout Attack]]
    *[[35de0530-71f4-4578-926d-bc0d25c12f45|Attack: Creation of False Transaction Attack]]
    *[[1408d3c3-7fc1-4ff0-910e-cdf0e191b669|Attack: Client-side Validation Attack]]

]]></Data>
  </Content>
</TeamMentor_Article>