<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1970448499" Content_Hash="-1076609823">
  <Metadata>
    <Id>4d3185fd-1e48-40af-bc07-71206c40806b</Id>
    <Id_History>6a219806-df28-4c00-bc2d-c2ce4c721b7e,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Trust Relationship Attack</Title>
    <Category>Security Policies</Category>
    <Phase>Design</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink>Trust Relationship Attack</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="wikitext">
    <Data><![CDATA[=Applies To

Applications that require multiple layers of authentication.
=Description

An attacker may be able to exploit the trust relationship between two or more systems or elements of systems if that trust is improperly assigned. All complex systems have many different trust relationships, and it's easy for that trust to get out of sync. Furthermore, trust relationships can allow an attacker to leapfrog between systems, exploiting the trust they gain by compromising one system to extend their hold to other systems. Trust relationships are sometimes specified too weakly, resulting in trust relationships where a host is trusted simply because of an IP address or other spoof-able identifier; these types of trust relationships are particularly fruitful for attackers.
=Impact

    *Privilege Escalation: An attacker may use a trust relationship to piggyback into other systems to execute commands or read/write/update/delete data on other systems.
    *Information Disclosure: With improper relationships an attacker may be able to read information they should not have access to

=Vulnerabilities

    *Failure to constrain trust: Applications which do not recognize the cases when they're trusting other systems are a particular issue here, but any time trust is granted in an overly broad way, issues arise.
    *Identification without Authentication: Identifying another system based on IP, Mac address, fingerprint, DNS name, or other information which only provides weak identification can allow an attacker to exploit that trust to gain access to those systems.
    *Improperly trusting a client: Trusting a client to do no evil sets the stage for an attacker to break into that system and choose what malicious actions to perform

=Countermeasures

    *Develop a threat model: A threat model can specify all the places where entities should trust one another. These relationships can then be analyzed for correctness and their implementations audited.
    *Authenticate all clients: All clients must be securely authenticated using proper techniques.
    *Do not base trust on spoof-able information: Do not trust a client or server based on IP, Mac address, or other spoof-able information. Require all clients to be strongly authenticated.

=Additional Resources

    *For more information on Authentication, see: http://en.wikipedia.org/wiki/Authentication

=Related Items

    *[[Attack: Business Rule Attack]]
    *[[Attack: Client-side Validation Attack]]
    *[[Attack: Luring Attack]]
    *[[Attack: Man in the Middle Attack]]
    *[[Attack: Repudiation Attack]]
    *[[Attack: Traffic Analysis Attack]]
    *Guideline: Allow Only Trusted Hosts to Connect to Database Server
    *Guideline: Use SSL When Transmitting Credentials
    *Guideline: Verify the Application's Authenticity to the User

]]></Data>
  </Content>
</TeamMentor_Article>