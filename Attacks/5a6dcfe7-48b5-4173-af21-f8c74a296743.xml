<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1497597469" Content_Hash="95266088">
  <Metadata>
    <Id>5a6dcfe7-48b5-4173-af21-f8c74a296743</Id>
    <Id_History>6223be91-b703-41cb-83db-ceb4afb98c78,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>Weak Keystore Protection Attack</Title>
    <Category>Encryption</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink>Weak Keystore Protection Attack</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>Applies To</h1>
  <p>Applications using cryptography.</p>
  <h1>Description</h1>
  <p>A keystore is a secure location on disk or in memory that can be used to store cryptographic keys or trusted certificates. Typically, these keys are bound to the machine and only available to a certain application. If the application uses a weak keystore, it may be possible to recover the keys and certificates from the keystore without proper credentials.</p>
  <h1>Impact</h1>
  <ul>
    <li>
      <strong>Information Disclosure:</strong> The attacker can gain access to the keys used by the application, allowing them to decrypt data the application attempts to protect with encryption, and to spoof the application to itself or other systems which trust data encrypted with those keys. <li><strong>Elevation of Privilege:</strong> The attacker may also be able to add new keys to the keystore or modify existing ones. This can result in the application trusting keys controlled by the attacker for sensitive operations or communicating with other systems.</li></li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>
      <strong>Using a Weak Keystore:</strong> Many operating environments provide a variety of key stores, some of which exist only for legacy reasons. Using an older version of a key store or a poorly implemented third party key store is likely to result in a key store compromise. <li><strong>Improperly Configuring a Strong Keystore:</strong> Many keystores support a variety of configuration options which allow for a wide range of security choices. Understanding the properties of your key store is essential to using it securely. <li><strong>Implementing a Custom or Homegrown Keystore:</strong> Strong keystores are both very tricky to write and require support from the operating environment. Attempting to write one should be considered on the same level as implementing a custom encryption algorithm or protocol, and should be avoided. <li><strong>Poor Key Handling:</strong> If the application isn't careful with how it manages keys when it adds them to the store or reads them out from the store for use, both key compromise and key disclosure are possible, even if the key store itself is strong.</li></li></li></li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>
      <p>
        <strong>Use a Strong Keystore:</strong> Which key store to use will vary by your platform. In Java, use the <strong>KeyStore</strong> class. On Windows, use DPAPI. Ensure that you are using the current version of the key store for your platform, including any patches.</p>
      <li>
        <p>
          <strong>Configure Your Keystore Correctly:</strong> Ensure that you know how to properly configure the key store in your environment. Ensure that any ACLs on the key store are locked down as tightly as possible while still allowing your system to function. For instance, after the initial install, it is unlikely that your application will need rights to add keys to the key store, nor rights to change the permissions on the key store; if possible, make sure the application gives these up after installation. Ensure that, if possible, all cryptographic operations occurr within the scope of the protected keystore, instead of manual exporting keys from the store or reading the bits out; if you can do this and you can lock your key store down even further, ensure that these operations cannot be performed on the key store. If you have a choice of keys or algorithms used to protect keys in the key store, ensure that they are appropriately strong.</p>
        <li>
          <p>
            <strong>Ensure Proper Key Handling:</strong> Handle your key material very carefully. Place keys in the key store as soon as possible and read them out as late as possible. Do not leave keys in memory when you do not need them, and ensure that the memory that you load them into is properly zeroed out. Be careful with immutable objects and garbage collection when handling key data. Under no circumstances should cleartext keys be written out to disk; among other things, make sure that you pin memory with sensitive data so that it will not be written out to swap.</p>
        </li>
      </li>
    </li>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>
      <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/security/KeyStore.html">http://java.sun.com/j2se/1.4.2/docs/api/java/security/KeyStore.html</a>
      <li>
        <a href="http://msdn2.microsoft.com/en-us/library/ms995355.aspx">http://msdn2.microsoft.com/en-us/library/ms995355.aspx</a>
      </li>
    </li>
  </ul>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/cd4ccbbb-be9c-4ff4-8b20-d116819b634b">Guideline: Use a Secure Key Storage Location </a>
      <li>
        <a href="/article/d72d0706-99df-4a65-a19d-6a83ec868a7b">Attack: Credentials Brute Force Attack</a>
        <li>
          <a href="/article/350d9e10-d3d2-4e15-af89-f6ea84c01320">Attack: Key Bruteforce Attack</a>
          <li>
            <a href="/article/2a28f8b4-6907-4fa2-b8db-0c96ef4912ec">Attack: Local Machine Credential Sniffing Attack</a>
          </li>
        </li>
      </li>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>