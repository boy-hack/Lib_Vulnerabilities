<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1134918211" Content_Hash="-720422532">
  <Metadata>
    <Id>61f0d74e-d9b6-4e27-9e12-da65baff83fd</Id>
    <Id_History>4eb11739-a13f-4dbb-9f28-68ebf96110d0,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>LDAP Injection Attack</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink>LDAP Injection Attack</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>Applies To</h1>
  <p>Applications using LDAP.</p>
  <h1>Description</h1>
  <p>LDAP injection is a technique for exploiting applications that use input from users to query an LDAP directory. Lightweight Directory Access Protocol (LDAP) is a widely used protocol for accessing directory services. Directories provide a set of attributes about people that are organized in a hierarchical manner, for example the phone directory. </p>
  <p>In principle this is exactly the same attack as SQL or XML injection; the only difference is the query language used and the database accessed. Because directories are primarily used to maintain information about people, LDAP injection has the potential to view, modify, or remove personal information about anyone in the directory. The most common mistake is creating filter statements dynamically without validating user input.</p>
  <h1>Impact</h1>
  <ul>
    <li>Unintentional information disclosure </li>
    <li>Elevation of privilege through manipulation of query results </li>
    <li>Corruption of LDAP data store through manipulation of updates</li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Building dynamic LDAP queries using untrusted input </li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>Untrusted input should be validated against an inclusion list before use (e.g., RegEx pattern, primitive type casting, domain constraint, etc.)</li>
  </ul>
  <h1>Example</h1>
  <p>
    <strong>Vulnerable Code:</strong>
  </p>
  <p>The following PHP code connects to an LDAP server on localhost and searches for records where the surname equals the value supplied by the user. </p>
  <pre>&lt;?php$ds=ldap_connect("localhost");<br /> if ($ds)<br /> {<br />    $ok=ldap_bind($ds);<br /> // anonymously bind for read-only access<br />    $surname=$_GET['surname'];<br />    $filter = "(sn=" . $surname . ")";<br />    $sr=ldap_search($ds, "o=My Company, c=US", $filter);<br />    $info = ldap_get_entries($ds, $sr);<br />    echo "&lt;p&gt;There are " . $info["count"] . " entries for that search:&lt;p&gt;";</pre>
  <pre>    for ($i=0; $i&lt;$info["count"]; $i++) {<br />        echo "common name: " . $info[$i]["cn"][0] . "&lt;br /&gt;";<br />        echo "telephone: " . $info[$i]["telephoneNumber"][0] . "&lt;br /&gt;";<br />        echo "email: " . $info[$i]["mail"][0] . "&lt;br /&gt;&lt;hr /&gt;";<br />    }</pre>
  <pre>    ldap_close($ds);</pre>
  <pre>}<br /> else {<br />    echo "&lt;h4&gt;connection error&lt;/h4&gt;";}?&gt;</pre>
  <p>If this code is in index.php at teammentorexample.com then the following URL would return all records where surname is Smith.</p>
  <pre>http://teammentorexample.com/index.php?surname=Smith</pre>
  <p>
    <strong>Attack Example:</strong>
  </p>
  <p>Now suppose an attacker entered:</p>
  <pre>
    <strong>x)(|(cn=*</strong>
  </pre>
  <p>instead of Smith. That is, the attacker could do the following:</p>
  <pre>http://teammentorexample.com/index.php?surname=x)(|(cn=*</pre>
  <p>Examining a few lines of the above code reveals that this would return a list of everyone in the directory.</p>
  <pre>    $sirname=$_GET['surname'];<br />    // $surname = x)(|(cn=*)<br />    $filter = "(sn=" . $surname . ")";<br />    // $filter = (sn=x)(|cn=*)<br />     $sr=ldap_search($ds, "o=My Company, c=US", $filter);<br />    // this reads: search My Companies directory for people<br />    //      having surname equal to x or anything<br /></pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on LDAP Injection, see: <a href="https://www.owasp.org/index.php/Interpreter_Injection#LDAP_Injection">https://www.owasp.org/index.php/Interpreter_Injection#LDAP_Injection</a><br /></li>
    <li>For more information on LDAP, see: <a href="http://en.wikipedia.org/wiki/Ldap">http://en.wikipedia.org/wiki/Ldap</a><br /></li>
    <li>For more information on IETF's RFC 2251 on LDAP, see: <a href="http://www.ietf.org/rfc/rfc2251.txt">http://www.ietf.org/rfc/rfc2251.txt</a></li>
  </ul>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/8062c64d-ca73-428b-b35a-e7e5952b9da5">Attack: SQL Injection Attack</a>
    </li>
    <li>
      <a href="/article/14def5f6-6ddf-450f-9a7e-36a8550b22f5">Attack: AJAX Injection Attack</a>
    </li>
    <li>
      <a href="/article/110cc11a-5a28-4fc2-a269-4210069b8865">Attack: Server-Side Code Injection Attack</a>
    </li>
    <li>
      <a href="/article/571ecf1a-d80c-475b-a0db-aff07069c997">Attack: XML Injection Attack</a>
    </li>
    <li>
      <a href="/article/9e18ec6e-1100-4423-b5cf-60b2e117ca25">Attack: Xpath-XQuery Attack</a>
    </li>
    <li>
      <a href="/article/c392a633-2f74-4557-94ba-9fd6eeeefb95">Attack: Client-side Validation Attack</a>
    </li>
    <li>
      <a href="/article/946a5edb-e8f8-4365-8675-b8a5032c201b">Guideline: Validate All Data Passed Between Native and Java Code </a>
    </li>
    <li>
      <a href="/article/f29fac90-c626-41d6-9184-acd6007696cf">Guideline: Validate Input for Length, Range, Format, and Type </a>
    </li>
    <li>
      <a href="/article/40eea61e-c8bd-494a-b75d-c18c2074c752">Guideline: Validate Input from All Sources </a>
    </li>
    <li>
      <a href="/article/6e981095-84bd-4158-a212-8f9937bcb336">Guideline: Do Not Rely on Client-Side Validation </a>
    </li>
    <li>
      <a href="/article/88f49e05-f101-4764-b8e3-b31cd7507071">Guideline: Do Not Rely on Request Validation </a>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>