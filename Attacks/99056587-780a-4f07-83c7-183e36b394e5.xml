<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="39113248" Content_Hash="-1712374677">
  <Metadata>
    <Id>99056587-780a-4f07-83c7-183e36b394e5</Id>
    <Id_History>733be22b-8cda-4c76-9009-1bafbb223ddc,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Response Splitting Attack</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink>Response Splitting Attack</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="wikitext">
    <Data><![CDATA[=Applies To

Any web application.
=Description

HTTP Response Splitting occurs when an attacker is able to inject arbitrary data into the headers of an HTTP response. In the presence of this vulnerability, the attacker can essentially force an HTTP response that contains HTML of the attacker's choosing. This is accomplished by simply terminating the header section of the response with the 0x0d 0x0a byte sequence and continuing with the malicious HTML. The resulting byte stream appears to the browser as two separate HTTP respsonses. The first contains the malicious HTML and is interpreted by the browser as being the legitimate response. The second contains the actual HTML that would have been returned by the server and is typically ignored.

By allowing the attacker essentially complete control over an HTTP response that is rendered in the context of your domain, you open the door for a Phishing Attack or a Cross Site Scripting Attack.
=Impact

    *Elevation of Privilege: The attacker can execute script in the context of your web application's domain.
    *Access control: The attacker can steal authentication cookies or at the very least execute additional HTTP requests in the context of the currently logged in user.
    *Defacement: The attacker can author pages with arbitrary content

=Vulnerabilities

*HTTP Response headers populated with untrusted and un-encoded input. The most common scenarios where this occurs are:
**HTTP Redirects (see example)
**HTTP Cookie values supplied by the user. For instance, if your application allows the user to supply a name and then sets a cookie value using that name. It is important to note that cookies are set with the Set-Cookie HTTP Response header.

=Countermeasures

Perform context sensitive scrubbing and encoding of untrusted input before it is used in an HTTP response header.

    *Remove or encode user input before using it in an HTTP response header.
    *In particular RFC 2616 states that CRs and LFs are not allowed in HTTP response headers, especially in the "Location" and "Set-Cookie" fields. Also remove sequences of CRs, LFs, SPs, and HTs and do not accept any input where LF is not followed by SP or HT.

As with any blacklist strategy, this is a good start but will not catch everything. Web proxies, such as Sun Java System Web Proxy Server, cause problems with this approach because they often accept CR only as a valid end of line marker and hence can be exploited by using only CR.
=Example

To demonstrate the response splitting attack consider the following situation. Suppose there is a web server located at the domain {{{example.com}}} that has two pages. The first page located at {{{/redirect.php}}} is used to redirect users to the second page at {{{/hello/world.html}}}.

Here is a simple redirect.php

{{{
<?phpheader ("Location: " . $_GET['site']);?>
}}}

Here is a simple {{{/hello/world.html}}}\\

{{{
<html>hello world!</html>
}}}

This link will redirect a user to the {{{hello/world.html}}} page.

{{{
http://example.com/redirect.php?site=hello/world.html
}}}

The following shows the headers that are sent between the client and the web server when this happens. First the client requests the page.

{{{
GET http://example.com:80/redirect.php?page=hello/world.html HTTP/1.1
Accept: */*Accept-Language: en-us
UA-CPU: x86
Accept-Encoding: gzip, deflate
User-Agent: Mozilla/4.0
Host: somewhere.com
Proxy-Connection: Keep-Alive
}}}

Then the server responds with a message telling the client that the page has moved and where to find it.

{{{
HTTP/1.1 302 Found
Server: Apache/1.3.33 (Unix) PHP/4.4.2X-Powered-By: PHP/4.4.2
Location: hello/world.html
X-Transfer-Encoding: chunked
Content-Type: text/htmlContent-length: 0
}}}

Hence the client application sends a request for the new page.

{{{
GET http://example.com:80/hello/world.html HTTP/1.1
Accept: */*
Accept-Language: en-us
UA-CPU: x86
Accept-Encoding: gzip, deflate
User-Agent: Mozilla/4.0
Host: 192.168.1.103
Proxy-Connection: Keep-Alive
}}}

Finally, the server responds with the page.

{{{
HTTP/1.1 200 OK
Server: Apache/1.3.33 (Unix) PHP/4.4.2
Accept-Ranges: bytes
Content-length: 28
Content-Type: text/html
 <html>hello world!</html>
}}}

There are a few things to note at this point. Each line in the above headers end with the carriage return line feed (CRLF) sequence {{{\r\n}}}. They are not shown in the above dialog to make things easier to read, but they exist and are important to applications when communicating. The next thing to note is that the URL-encoded CRLF sequence {{{%0d%0a}}} is equivalent to {{{\r\n}}} and can be used to embed Header information into a URL. The next part of this example demonstrates how this can be used to deliver an attacker controlled page to a users browser.

Consider what happens when the following is injected into a URL:

{{{
%0d%0aContent-Type: text/html%0d%0aHTTP/1.1 200 OK%0d%0a Content-Type: text/html%0d%0a%0d%0a%3Chtml%3E Insert attacker payload here! %3C/html%3E
}}}

That is, the user is given the following link:

{{{
http://example.com/redirect.php?site=%0d%0aContent-Type: text/html%0d%0aHTTP/1.1 200 OK%0d%0aContent-Type: text/html%0d%0a%0d%0a%3Chtml%3E Insert attacker payload here! %3C/html%3E
}}}

Now we take a look at what happens to the headers during the during the dialog when a client requests the above URL.

{{{
GET http://example.com/redirect.php?site=%0d%0aContent-Type: text/html%0d%0a
  HTTP/1.1 200 OK%0d%0aContent-Type: text/html%0d%0a%0d%0a%3C
  html%3E Insert XSS payload here!
 %3C/html%3E HTTP/1.1
Accept: */*
Accept-Language: en-us
UA-CPU: x86
Accept-Encoding: gzip, deflate
User-Agent: Mozilla/4.0
Host: somewhere.com
Proxy-Connection: Keep-Alive
Pragma: no-cache
}}}

Basically two headers are being sent with a single request. Let's look at the above header in a more readable form:

{{{
GET http://example.com/redirect.php?site=Content-Type: text/html
HTTP/1.1 200 OK
Content-Type: text/html
 <html> Insert attacker payload here! </html>
 HTTP/1.1
Accept: */*
Accept-Language: en-us
UA-CPU: x86A
ccept-Encoding: gzip, deflate
User-Agent: Mozilla/4.0
Host: 192.168.1.103
Proxy-Connection: Keep-Alive
Pragma: no-cache
}}}

When the server receives this header it sends the following two responses which include the attackers payload.

{{{
HTTP/1.1 302 Found
Server: Apache/1.3.33 (Unix) PHP/4.4.2
Location:
Content-Type: text/html
HTTP/1.1 200 OK
Content-Type: text/html
<html> Insert attacker payload here! </html>
Keep-Alive: timeout=15, max=100
Connection: Keep-Alive
Transfer-Encoding: chunked
Content-Type: text/html
}}}

=Additional Resources

    *For more information on HTTP Response Splitting, see: http://projects.webappsec.org/w/page/13246931/HTTP%20Response%20Splitting
    *For more information about an Introduction to HTTP Response Splitting, see: http://www.securiteam.com/securityreviews/5WP0E2KFGK.html

=Related Items

    *[[Attack: Request Smuggling Attack]]
    *[[Attack: Canonicalization Attack]]
    *[[Attack: Cross Site Scripting Attack]]
    *[[Attack: Phishing Attack]]
    *[[Attack: URL Redirection Attack]]
    *Guideline: Encode All Output Data
    *Guideline: Validate Input from All Sources
    *Guideline: Validate All Input Passed to Database

]]></Data>
  </Content>
</TeamMentor_Article>