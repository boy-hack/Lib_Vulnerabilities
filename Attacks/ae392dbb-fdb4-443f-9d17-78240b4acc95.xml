<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="813548528" Content_Hash="324309240">
  <Metadata>
    <Id>ae392dbb-fdb4-443f-9d17-78240b4acc95</Id>
    <Id_History>571ecf1a-d80c-475b-a0db-aff07069c997,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>XML Injection Attack</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink>XML Injection Attack</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>Applies To</h1>
  <p>Any application that writes user input to an XML file on a server.</p>
  <h1>Description</h1>
  <p>An XML injection vulnerability will allow an attacker to insert malicious data into XML which resides on the server. Depending on the type of XML parser used (SAX or DOM), this malicious data could be used to either overwrite the values in previous nodes or cause the XML parser to consume an excessive amount of memory on the server.</p>
  <h1>Impact</h1>
  <ul>
    <li>Modification of previous node values in the XML <li>Denial of Service on the server <li>Exposure of entire XML document to unauthorized users. <li>Addition of new nodes or even entire documents. <li>Ability to modify or remove data that should not be accessed.</li></li></li></li></li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Dynamic XML generation using untrusted input <li>Incorrectly defined schema <li>Lack of schema validation <li>Failure to validate input and properly encode any dangerous meta characters according to the context</li></li></li></li>
  </ul>
  <a name="Countermeasures">
  </a>
  <h1>Countermeasures</h1>
  <ul>
    <li>
      <p>
        <strong>When loading an XML file on the server validate it against a defined XSD</strong>.</p>
      <li>
        <p>
          <strong>Perform context-sensitive encoding of untrusted input</strong>. As with encoding data to be output in HTML, a whitelist approach should be taken. For each context which data is going to be inserted in (element, attribute value, etc.) a set of known-safe characters should be constructed. The data to be added should be checked against the whitelist, and any characters not specifically listed should be encoded. CDATA sections should be used to further ensure that the parser ignores special characters. Ideally, only non-XML values should be accepted from untrusted sources. If an XML blob must be accepted from an untrusted source, it should be manually reassembled from values parsed out and encoded after checking the received blob against an XSD.</p>
        <li>
          <p>
            <strong>Untrusted input should be validated against an inclusion list before use</strong>. For example, use a RegEx pattern, primitive type casting, a domain constraint, or another validator. See the Additional Resources for more information on data validation.</p>
          <li>
            <p>
              <strong>Trim XML documents to include only the data that is necessary to the application</strong>.</p>
            <li>
              <p>
                <strong>Use XML processing pipelines to make the flow of data clear and threats easier to identify</strong>.</p>
              <li>
                <p>
                  <strong>Remove DOCTYPE element from user input before creating XML objects</strong>.</p>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <h1>Example</h1>
  <p>Let us assume that a valid node in our server side XML looks like this:</p>
  <pre>&lt;UserRecord&gt;   &lt;UniqueID&gt;5&lt;/UniqueID&gt;   &lt;Name&gt;Gandalf&lt;/Name&gt;   &lt;Email&gt;Gandalf&amp;#64;MiddleEarth.com&lt;/Email&gt;   &lt;Address&gt;One Middle Earth Way, ME&lt;/Address&gt;   &lt;ZipCode&gt;10000&lt;/ZipCode&gt;   &lt;PhoneNumber&gt;123-456-7890&lt;/PhoneNumber&gt;&lt;/UserRecord&gt;</pre>
  <p>The UniqueID field here is assigned by the server. Now, if web server accepts input from the user and stores it in the XML file, what is the outcome of the parser when a user enters the following data for the Email field:</p>
  <pre>Gandalf&amp;#64;MiddleEarth.com&lt;/Email&gt;&lt;UniqueID&gt;0&lt;/UniqueID&gt;&lt;Name&gt;Gandalf&lt;/Name&gt;&lt;Email&gt;Gandalf&amp;#64;MiddleEarth.com</pre>
  <p>The resulting XML on the server will look like this:</p>
  <pre>&lt;UserRecord&gt;   &lt;UniqueID&gt;5&lt;/UniqueID&gt;   &lt;Name&gt;Gandalf&lt;/Name&gt;   &lt;Email&gt;Gandalf&amp;#64;MiddleEarth.com&lt;/Email&gt;&lt;UniqueID&gt;0&lt;/UniqueID&gt;               &lt;Name&gt;Gandalf&lt;/Name&gt;&lt;Email&gt;Gandalf&amp;#64;MiddleEarth.com&lt;/Email&gt;   &lt;Address&gt;One Middle Earth Way, ME&lt;/Address&gt;   &lt;ZipCode&gt;10000&lt;/ZipCode&gt;   &lt;PhoneNumber&gt;123-456-7890&lt;/PhoneNumber&gt;&lt;/UserRecord&gt;</pre>
  <p>We now have two fields and values for UniqueID, Name and Email. The outcome of parsing such data will depend upon the type of XML parser used:</p>
  <ul>
    <li>If a SAX parser is used, it will report the UniqueID for this node to be 0, so an attacker would have essentially overwritten the field value. <li>If a DOM parser is used, it will report an error. However, the DOM parser can be abused by inserting additional nodes in the XML while still matching the schema, which will lead to excessive memory consumption by the parser and could potentially result in a Denial of Service.</li></li>
  </ul>
  <p>Also note that this is a simple example. It is possible to insert an entire new record among other issues. To fix the example above we can escape the markup delimiters to prevent the users input from being interpreted, replacing &amp; with &amp;, &lt; with &lt;, and so on as described in the Countermeasures section. This will prevent the users data from being interpreted in this case. In general, though, we don't know exactly what the input might look like, so the best plan is to have a white-list acceptable characters and do type checking as much as possible. Where type checking is not possible consider using CDATA to enforce that the string be treated strictly as data. For example:</p>
  <pre>&amp;#36;evil_input = "Gandalf&amp;#64;MiddleEarth.com&lt;/Email&gt;   &lt;UniqueID&gt;0&lt;/UniqueID&gt;&lt;Name&gt;Gandalf&lt;/Name&gt;&lt;Email&gt;Gandalf&amp;#64;MiddleEarth.com";&amp;#36;data = "&lt;&amp;#33;&amp;#91;CDATA&amp;#91;" &amp;#43; &amp;#36;evil_input &amp;#43; "&amp;#93;&amp;#93;&gt;";</pre>
  <p>After we insert &amp;#36;data into the email field above the result will be the following acceptable XML:</p>
  <pre>&lt;UserRecord&gt;   &lt;UniqueID&gt;5&lt;/UniqueID&gt;   &lt;Name&gt;Gandalf&lt;/Name&gt;   &lt;Email&gt;&lt;&amp;#33;&amp;#91;CDATA&amp;#91;Gandalf&amp;#64;MiddleEarth.com&lt;/Email&gt;&lt;UniqueID&gt;0&lt;/UniqueID&gt;             &lt;Name&gt;Gandalf&lt;/Name&gt;&lt;Email&gt;Gandalf&amp;#64;MiddleEarth.com&amp;#93;&amp;#93;&gt;   &lt;/Email&gt;   &lt;Address&gt;One Middle Earth Way, ME&lt;/Address&gt;   &lt;ZipCode&gt;10000&lt;/ZipCode&gt;   &lt;PhoneNumber&gt;123-456-7890&lt;/PhoneNumber&gt;&lt;/UserRecord&gt;</pre>
  <p>CDATA is very useful when used correctly but it has the same generic problem as we had before. An attacker can create a malicious string that uses "&amp;#93;&amp;#93;&gt;" to end the CDATA and insert malicious XML. Therefore, wherever we use CDATA we must also remove or escape &amp;#93;&amp;#93;&gt; from the input string&amp;#8212;at a certain point, it's easier to simply give up and encode everything by whitelist.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>
      <a href="http://www.w3.org/XML/Processing/">http://www.w3.org/XML/Processing/</a>
      <li>
        <a href="http://www-128.ibm.com/developerworks/xml/library/x-think37/index.html">http://www-128.ibm.com/developerworks/xml/library/x-think37/index.html</a>
        <li>
          <a href="http://www.owasp.org/index.php/Data_Validation">http://www.owasp.org/index.php/Data_Validation</a>
          <li>
            <a href="http://www-128.ibm.com/developerworks/xml/library/x-tipcfsx.html">http://www-128.ibm.com/developerworks/xml/library/x-tipcfsx.html</a>
            <li>
              <a href="http://www.w3schools.com/xml/xml_cdata.asp">http://www.w3schools.com/xml/xml_cdata.asp</a>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/9e18ec6e-1100-4423-b5cf-60b2e117ca25">Attack: Xpath-XQuery Attack</a>
      <li>
        <a href="/article/8062c64d-ca73-428b-b35a-e7e5952b9da5">Attack: SQL Injection Attack</a>
        <li>
          <a href="/article/7d83d845-cd2b-4067-bb4c-5fbb890b9c9e">Attack: Information Disclosure Attack</a>
          <li>
            <a href="/article/110cc11a-5a28-4fc2-a269-4210069b8865">Attack: Server-Side Code Injection Attack</a>
            <li>
              <a href="/article/14def5f6-6ddf-450f-9a7e-36a8550b22f5">Attack: AJAX Injection Attack</a>
              <li>
                <a href="/article/4eb11739-a13f-4dbb-9f28-68ebf96110d0">Attack: LDAP Injection Attack</a>
                <li>
                  <a href="/article/c392a633-2f74-4557-94ba-9fd6eeeefb95">Attack: Client-side Validation Attack</a>
                  <li>
                    <a href="/article/946a5edb-e8f8-4365-8675-b8a5032c201b">Guideline: Validate All Data Passed Between Native and Java Code </a>
                    <li>
                      <a href="/article/88f49e05-f101-4764-b8e3-b31cd7507071">Guideline: Do Not Rely on Request Validation </a>
                      <li>
                        <a href="/article/40eea61e-c8bd-494a-b75d-c18c2074c752">Guideline: Validate Input from All Sources </a>
                        <li>
                          <a href="/article/f29fac90-c626-41d6-9184-acd6007696cf">Guideline: Validate Input for Length, Range, Format, and Type </a>
                          <li>
                            <a href="/article/6e981095-84bd-4158-a212-8f9937bcb336">Guideline: Do Not Rely on Client-Side Validation </a>
                          </li>
                        </li>
                      </li>
                    </li>
                  </li>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>