<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>279ad567-2b34-44ce-8e56-8d96770ba500</Id>
    <Id_History>00000000-0000-0000-0000-00000025d26a,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Open Redirect</Title>
    <Category>Redirects and Forwards</Category>
    <Phase>Implementation</Phase>
    <Technology>PHP</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Open Redirect</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description

Many web applications use URL redirection to direct a user to another site or page on the same site. Some web sites make it possible to manipulate the destination of the URL redirection. An attacker may be able to abuse this functionality to trick users into entering sensitive information into a malicious website while seemingly navigating within a trusted website. This vulnerability applies to all applications that use URL redirection. 

=Impact

Open redirects allow an attacker to send users to a malicious site via a legitimate-looking URL. Many users are tricked by the legitimate-looking URL into thinking that they are browsing a trusted site. The malicious site may have an authentic looking login page, which tempts unsuspecting users into entering their usernames and passwords. When personal information is entered into the malicious login page, it is recorded for the attacker's use. Once the attacker has valid user credentials, he can access or modify users' data in the application. If the attacker is able to take over an administrative account, he may gain full control of the application. 

=Countermeasures

To prevent this problem, avoid using redirects altogether, if possible.  If redirects are necessary, avoid redirection based on user input if possible. If user input is necessary for redirects, use reference maps to limit permissible redirect destinations, and always validate destinations of redirects. 

The choice depends on how much user input is required to determine where to redirect to. The less user input, the safer the application. If redirection takes place regardless of user input, destinations can be calculated without user input. If user input is necessary, ensure that there is a clearly defined list of valid redirection targets, and use these to build reference maps to limit permissible redirect destinations, and always validate the destinations.  NOTE: If valid targets cannot be reduced to a list of safe destinations, then an open redirect vulnerability is virtually guaranteed and it's better not to redirect at all.  

If it is acceptable to remove redirection or redirection targets cannot be clearly defined:
* [[9dd99e67-7f4b-4c3b-b355-253edd7b29a3|Don't Use Redirects Or Forwards If Possible]]

If redirection takes place regardless of user input:
* [[6daf44c7-fe2c-45f6-8854-7aa1e3a1030f|Calculate Destinations of Redirects And Forwards Without User Input]]

If user input is necessary, and it is possible to clearly define valid redirection targets:
* [[d718d5f2-247e-4299-a6ca-bfeaaac67eea|Use Mapping Values When Redirecting on User Input]]
* [[f86bc5a9-e545-461b-9ba5-c6659841250e|Validate Destinations of Redirects And Forwards]]

=Application Check

To check for adequate protection against this problem, choose the application check that fits the above Countermeasures strategy that you have chosen:  Ensure that redirects are not used.  OR  Ensure that redirection is not based on user input.  OR  If user input is needed, ensure that reference maps are used to limit permissible redirect destinations, and always validate the destinations of redirects.

If it is acceptable to remove redirection or redirection targets cannot be clearly defined:
* [[af8c3ff3-490d-40fe-bed3-eca342fdba4e|Redirects And Forwards Are Not Used Unless Necessary]]

If redirection takes place regardless of user input:
* [[a1061c45-7a6e-4257-ab36-f3a693d45ad3|Destinations of Redirects And Forwards Are Calculated Without User Input]]

If it is possible to clearly define valid redirection targets:
* [[ff0f750a-308b-4c78-8602-3c6d603e406d|Mapping Values Are Used for Redirects And Forwards]]
* [[f87f29d2-388b-4d5f-bab5-bdf7b17eff85|Destinations of Redirects And Forwards Are Validated]]

=Web-Based Training
[[|AWA 101 Fundamentals of Application Security]]

This two-part course is ideal for security and development practitioners that want to understand software security risk and seek specific implementation guidance on how to build and deploy more secure software applications.  It starts off describing why software security is critical and the risk that software vulnerabilities represent, and proceeds to lay the foundation for secure software development by presenting specific security controls and principles that development teams can implement immediately to reduce software risk. 

For more information on Open Redirect issues, see screens 65-68 in AWA 101 Fundamentals of Application Security.

[[|COD 315 Creating Secure PHP Code]]

PHP: Hypertext Preprocessor is a popular, powerful, and flexible language that developers use to build web applications. PHP includes frameworks, solutions, and functions that help developers create and manage secure web sessions, enable proper handling of errors in code, and provide safeguards against malicious attacks. However, novice programmers often ignore these solutions and functions and use different methods to develop programs. This introduces vulnerabilities in the programs, which attackers can exploit to access and modify critical user data stored in system files, databases, and web servers. This course introduces best practices for developing secure PHP code. The course also identifies common PHP vulnerabilities that attackers can exploit to gain access to critical information. In addition, the course explains mitigation techniques that you can use to avoid common PHP vulnerabilities and write secure code. 

For more information on Open Redirect issues, see screen 58 in COD 315 Creating Secure PHP Code.

=Additional Resources

* For more information about open redirect vulnerabilities, please see https://www.owasp.org/index.php/Open_redirect]]></Data>
  </Content>
</TeamMentor_Article>