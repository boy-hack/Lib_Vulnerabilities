<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-0000002f9f56</Id>
    <Library_Id>26bd1a04-beed-4a66-917d-b6ab0a7d634c</Library_Id>
    <Title>Command Execution</Title>
    <Category>Dangerous APIs</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 4.0</Technology>
    <Type>Landing Page</Type>
    <DirectLink>Command Execution</DirectLink>
  </Metadata>
  <Content Sanitized="false" DataType="WikiText">
    <Data><![CDATA[==Description==

Command injection (command execution) is a type of vulnerabilities that allows an attacker to execute arbitrary code or external processes by injecting control information into the data stream.

==Countermeasures==

The following TeamMentor articles describe effective counter-measures against command injection vulnerabilities:

* [[3de41277-0cc1-4ebc-8dd7-e96d161aa0ef|Validate All Input]]
* [[e59923e7-c2fb-4a75-8db7-a9a91e869f74|Validate Input for Length, Range, Format, And Type]]

==Checklists==

The following checklist items can help make sure that effective counter-measures against command injection vulnerabilities have been implemented:

* [[a210fcb7-f142-4c2e-844a-c43e0859f90d|All Input Is Validated]]
* [[0e71dd64-87d1-4cf5-9569-ea320f209977|Input Is Validated for Length, Range, Format, And Type]]

==Additional Resources==

* For more information about command injection, please see https://www.owasp.org/index.php/Command_Injection 
* For more information about command injection, please see http://software.e-articles.info/Command-Injection]]></Data>
  </Content>
</TeamMentor_Article>