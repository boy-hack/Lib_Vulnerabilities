<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>db479b30-f48e-4d2f-94f7-8fc050021021</Id>
    <Id_History>00000000-0000-0000-0000-000000140c0a,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6204f2d47eb7</Library_Id>
    <Title>Parameter Tampering</Title>
    <Category>Session Management</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Parameter Tampering</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description

A parameter tampering vulnerability occurs when an attacker can modify parameters used by a web application that have security implications. For example, a vulnerable application may allow an attacker to change his user id by changing request parameters. The vulnerability stems from relying on user-accessible parameters to store security sensitive information. Common vulnerable areas are data stored in cookies, hidden form fields, and HTTP request parameters. This vulnerability type applies to web applications. 

=Impact

The exact impact of parameter tampering depends on the parameters that are available for tampering. This vulnerability usually allows the attacker to change his status from regular user to admin. In that case, the attacker is able to take full control of the application and its data. Another common impact is that the attacker is able to change his user id to that of another user. In that case the attacker can access and modify the user's data and impersonate that user. Parameter tampering usually allows the attacker to impersonate any user of his choosing. 

=Countermeasures

To prevent this problem, use platform provided session management, and don't store sensitive data in user accessible parameters. 

Use platform-provided session management:
* [[0ed7310a-a0fd-4074-9c0f-37f48cf2bf4f|Use Session Management Offered by the Framework]]

Don't store sensitive data in user accessible parameters:
* [[9df0b518-f832-4a7c-9857-0517638c47db|Do Not Make Security Decisions Based on Client-Accessible Parameters]]

=Application Check

To check for adequate protection against this vulnerability, ensure that platform provided session management is used, and sensitive data is not stored in user accessible parameters. Identify all user-mutable parameters and verify that tampering with them does not result in elevated privileges. 

Platform-provided session management is used:
* [[3f2660b3-a935-4b4e-85ff-27ae28683f5b|Session Management Offered by the Framework Is Used]]

Sensitive data is not stored in user accessible parameters:
* [[4436e342-64d9-4b1b-ae9b-3e00696053fb|Security Decisions Are Not Made Based on Client-Accessible Parameters]]

=Computer Based Training Links=

Use the following Computer Based Training course(s) for more background information about this type of vulnerabilities.

//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//

=Additional Resources

* For more information about parameter tampering, see https://www.owasp.org/index.php/Web_Parameter_Tampering]]></Data>
  </Content>
</TeamMentor_Article>